#!/usr/bin/env ruby
require 'gli'
require 'redis'
require 'xcflushd/runner'

include GLI::App

program_desc 'XC flush daemon'

version Xcflushd::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Starts the daemon'
arg_name 'Describe arguments to run here'
command :run do |c|
  c.desc 'Redis host'
  c.flag :redis_host

  c.desc 'Redis port'
  c.flag :redis_port

  c.desc '3scale backend host'
  c.flag :threescale_host

  c.desc '3scale provider key'
  c.flag :provider_key

  c.desc 'Validity of authorizations (in minutes)'
  c.flag :auth_valid_minutes

  c.desc 'Reporting frequency (in minutes)'
  c.flag :reporting_freq_minutes

  c.action do |_global_options, options, _args|
    [:threescale_host,
     :provider_key,
     :redis_host,
     :redis_port,
     :auth_valid_minutes,
     :reporting_freq_minutes].each do |opt|
      help_now!("#{opt} is required") unless options[opt]
    end

    if options[:reporting_freq_minutes] >= options[:auth_valid_minutes]
      exit_now!('reporting_freq_minutes needs to be >= auth_valid_minutes. '\
                'Otherwise, auths would be renewed without taking into '\
                'account the new reports.')
    end

    Xcflushd::Runner.run(options[:threescale_host],
                         options[:provider_key],
                         options[:redis_host],
                         options[:redis_port].to_i,
                         options[:auth_valid_minutes].to_i)
  end
end

pre do |_global, _command, _options, _args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |_global, _command, _options, _args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |_exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
